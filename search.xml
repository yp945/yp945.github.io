<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[pbft共识算法问题答案]]></title>
    <url>%2F2019%2F07%2F10%2Fpbft%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98%E7%AD%94%E6%A1%88%2F</url>
    <content type="text"><![CDATA[pbft共识算法问题答案 pfbt共识为什么至少需要3f+ 1个节点？ 最坏的情况，系统拜占庭节点为f个，由于消息到达顺序的问题，有可能f个有问题的节点先比f个正常的节点先返回消息，此时又要保证正确的消息比有问题的消息多，所以至少3f+ 1个节点 N - f- f > f => N > 3f pbft共识 parpare和commit 阶段为什么收到需要2f+ 1个相同的回复（包括自己的），f + 1个不行吗？ 某副本收到了f+ 1相同的消息反馈,如果这个f+ 1个反馈中包含faulty 节点，此时消息是不能作数的，因为faulty可能会发送错误消息给不同的节点，所以需要必须要2f+1个相同的反馈确认才能保证f+1个non-faulty节点正常，这时候即便f个faulty节点给不同人发不同消息也没关系，f+1个non-faulty节点已经形成了统一战线，他们在人数上已经多于那些墙头草了，可以达成一致了。 pbft 共识 客户端为什么需要f + 1个节点的相同回复，f个不行吗？ 假设只需要从f个不同的节点那里拿到相同的reply，但我们不得不考虑一种情况，即这f个相同的reply全是来自f个faulty节点【系统中至多有f个faulty节点】。如果真是这样的话，很有可能客户端就得到错误的结果。因此为了进一步增强reply的可信度，我们需要来自不同节点的总计(f+1)个相同reply。多出的那一个可以作为对比！ pbft共识 为什么需要三阶段？去除掉commit阶段可以吗？ 假设我们去掉commit，所有节点收到2f+1(包括自己)的prepare之后就执行操作，会发生什么？ 其实如果顺利的话，即使有f个作恶节点，依然有f+1个正常节点所有节点都会收到正确的结果，最后所有的节点都能顺利的达成一致的结论。这样看来似乎我们完全不需要commit吗？ 但是如果主节点崩溃发生换主，其中只有一个或几个（不是大多数）已经收到了足够的prepare，其他节点因为网络原因没有收到本应该收到的足够多的prepare（异步网络环境没有任何通信保证，只有最终一定会收到的保证），那么那个执行了操作的节点就悲剧了，这个时候新主发起新一轮共识，sequence跟已经执行的操作一致，那个节点到底执行好还是不执行同样sequence的操作？ 那么commit是怎么做到的呢？假设节点收到足够多的prepare进入commit阶段，这个时候发生了一样的换主情形，由于节点还没执行，继续按照新一轮的流程走即可，这个时候sequence不变，但是view改变。 如果已经收到了足够的commit，并且已经执行了操作呢？仿佛陷入了prepare一样的地步…但是实际上因为要产生commit消息，说明2f+1个节点已经prepare了，换主的时候主会去搜集要重放的pre-prepare（2f+1个节点的，必然存在一个诚实节点并且有对应的pre-prepare）,因此会把同样的digest对应的消息view改为自己重发一次，并且注意到commit只需要跟当前的view相同就可以接受，那么实际上commit是对view不敏感的。 简而言之，prepare锁定同一个view下的sequence，commit锁定sequence。 在一个节点数为N的节点中，诚实节点的数量是多少个？ (non-faulty)=(2/3)*N+1 CAP定理在pbft中是如何取舍的？ PBFT算法将一致性（C）摆在首位，对可用性（A）作了妥协。一旦faulty节点的数量超过f，该系统就不能继续执行客户端的请求【系统会卡住，不能做写操作】。此外，分区容忍是必须要保证的。 设置waterline的目的是什么？ 假设主节点是坏的，它在给请求编号时故意选择了一个很大的编号，以至于超出了序号的范围，所以我们需要设置一个低水位（low water mark）h和高水位（high water mark）H，让主节点分配的编号在h和H之间，不能肆意分配 PAREPARE 和commit阶段为什么需要保存消息在本地或者内存？PRE-PREPARE为什么不需要？ 保存消息的主要目的是为了方便viewChange的时候能够恢复消息，重新在新的view上达成共识。PRE-PREPARE阶段各节点还没有发送消息给对方，所以不需要保存。 pbft通信时间复杂度是多少？如何计算的？ 因为需要三阶段共识，每个阶段各个节点之间都需要通信，所以通信量还是很大的。 假设系统中存在2个拜占庭节点，此时应该最少需要7个节点，下图展示了7个节点通信的过程 请求消息总量为： 1 + 3f + 3f(3f-f) + (3f-f+1)(3f+1) + 3f-1 在上述例子中我们可以进行一个简单计算 12345request messages: 1pre-prepare messages: 3f = 6prepare messages: 3f(3f-f) = 24commit messages: (3f-f+1)(3f+1)= 35reply messages: 3f-1 = 5 可以看出当有7各节点时，pbft需要的消息通信总量竟然达到了71次，这还是只有一次请求的情况下，如果副本更多，消息将会变得更多。 如果在commit阶段view change，会导致达成不了共识吗？会导致之前的view下的请求编号丢失吗？ 如果commit阶段viewchange，会保留之前commit阶段的请求，不会达成不了共识，也不会丢失请求编号 prepare阶段和commit阶段用来确保那些已经达到commit状态的请求即使在发生viewchange后在新的view里依然保持原有的序列不变，比如一开始在view 0中，共有req 0， req 1， req2三个请求依次进入了commit阶段，假设没有坏节点，那么这四个replicas即将要依次执行者三条请求并返回给Client。但这时主节点问题导致view change的发生，view 0 变成 view 1，在新的view里，原本的req 0， req1， req2三条请求的序列被保留，作数。那些处于pre-prepare和prepare阶段的请求在view change发生后，在新的view里都将被遗弃，不作数。 简单来说就是 如果每个节点都进入了commit阶段（这里要强调的是每个节点都进入这个commit阶段才算是整体进入了commit阶段），这时即使view change，也会保留之前的view里进入commit阶段的请求信息，view change会继续之前的commit阶段请求，不会再重新进入pre-prepare和prepare阶段。]]></content>
      <categories>
        <category>共识算法</category>
      </categories>
      <tags>
        <tag>pbft</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pbft共识算法]]></title>
    <url>%2F2019%2F07%2F10%2Fpbft%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[pbft共识算法PBFT 是 parctical Byzantine Fault Tolerance（实用拜占庭容错算法）的缩写，它是由BFT算法演化出来的， 所有的BFT算法都为了解决一个问题，那就是在一个不可信的网络里，各个节点如何达成共识。这类问题被称为拜占庭将军问题。什么是拜占庭将军问题呢？拜占庭位于如今的土耳其的伊斯坦布尔，是古代东罗马帝国的首都。拜占庭罗马帝国国土辽阔，为了达到防御目的，每块封地都驻扎一支由将军统领的军队，每个军队都分隔很远，将军与将军之间只能靠信差传递消息。 在战争的时候，拜占庭军队内所有将军必需达成一致的共识，决定是否有赢的机会才去攻打敌人的阵营。但是，在军队内有可能存有叛徒和敌军的间谍，左右将军们的决定影响将军们达成一致共识。在已知有将军是叛徒的情况下，其余忠诚的将军如何达成一致协议的问题，这就是拜占庭将军问题。 比特币和以太坊代表的POS，EOS代表的DPOS，这些都是公链的算法，适用于众多节点的情况，通过牺牲CAP理论里面的 一致性来达到可用性。PBFT 本身算法的复杂度为O（n^2）他牺牲了可用性来达到一致性，适用于联盟链节点少的情况。 下面图片展示了主流的共识算法 实用拜占庭容错系统（PBFT）降低了拜占庭协议的运行复杂度，从指数级别降低到多项式级别（Polynomial），使拜占庭协议在分布式系统中应用成为可能。 ​ PBFT是一种状态机副本复制算法，即服务作为状态机进行建模，状态机在分布式系统的不同节点进行副本复制。每个状态机的副本都保存了服务的状态，同时也实现了服务的操作。将所有的副本组成的集合使用大写字母R表示，使用0到|R|-1的整数表示每一个副本。为了描述方便，通常假设故障节点数为f个，整个服务节点数为|R|=3f+1个，这里m是有可能失效的副本的最大个数。尽管可以存在多于3f+1个副本，但是额外的副本除了降低性能之外不能提高可靠性。 PBFT要求共同维护一个状态，所有节点采取的行动一致。为此，需要运行三类基本协议，包括一致性协议、检查点（checkPoint）协议和视图更换(viewChange)协议。我们主要关注支持系统日常运行的一致性协议。一致性协议至少包含若干个阶段：请求（request）、序号分配（pre-prepare）和响应（reply）。根据协议设计的不同，可能包含相互交互（prepare），序号确认（commit）等阶段。 上图显示了一个简化的PBFT的协议通信模式，其中C 为客户端， N0 ~N3 为共识节点。 其中N0 为主节点，N3 为故障节点。整个协议基本过程如下 (一)、客户端发出请求，激活主节点的服务操作。 (二)、主节点接收到请求，采用三阶段协议以向从节点广播请求。 序号分配阶段，主节点给每个请求分配一个序号N，广播序号分配消息和客户端的请求消息m,并将构造PRE-PREPARE 消息给各个从节点。 交互阶段 从节点收到PRE-PREPARE消息，向其他节点广播PARPARE消息。 序号确认阶段，各节点对当前视图（view）的请求和次序验证后，广播Commit消息，执行收到的客户端的请求，然后将结果响应给客户端。 (三) 、客户端等到f+1的相同的响应结果，则认为此次请求成功完成。 在这个机制下有一个视图（view）的概念，类似raft的term的概念。在当期view里面，有一个主节点，其他都是备份节点。主节点将客户端的请求编号并排序，然后发送给副本节点。但是此时主节点有可能是拜占庭的，它有可能给消息编上相同的序号，或者不去给消息分配序号，或者让分配的序号不连续。备份节点有职责去检查这次序号，并根据timeout机制判断主节点是否存活。当出现这些异常情况的时候，副本节点会触发viewChange协议来更换主节点，关于viewChange协议我们后面会讲到，接下来我们详细的分析各个阶段。 视图是连续的整数编号。主节点由公式得出 \mathrm{p}=\mathrm{v} \bmod |\mathrm{N}|这里v 是视图编号，p是副本编号， |N| 是副本集合的个数，当主节点失效就会触发viewChange过程。 请求阶段（REQUEST）客户端向主节点发送 请求, o为请求的具体的操作，t 为请求时客户端追加的时间戳，c为客户端标识。 预准备阶段（PRE-PREPARE）主节点接收到客户端的请求后需要进行以下校验 客户端请求消息签名是否合法，如果合法，则分配一个序号n给该请求，然后向所有的副本节点发送预准备消息，预准备消息的格式为&lt;, m&gt;，这里v是当前视图编号，n为消息序号，这个消息序号必须在[h, H] 之间，具体原因后面分析， d为请求消息的摘要。m是具体的消息。 请求本身是不包含在预准备消息体里面的，这样就可以使预准备消息足够小，因为预准备消息就是为了作为一个证明，证明在这个view里面 请求的的序号被赋值为n，从而可以在viewChange过程中可以进行追索另外一个层面，将“请求排序协议”和“请求传输协议”进行解耦，有利于对消息传输的效率进行深度优化。 准备阶段（PREPARE）副本节点i收到主节点的&lt;，m&gt;消息，需要进行以下校验： a. 主节点PRE-PREPARE消息签名是否正确。 b. 当前副本节点是否已经收到了一条在同一v下并且编号也是n，但是签名不同的PRE-PREPARE信息。 c. d与m的摘要是否一致。 d. n是否在区间[h, H]内。 如果检验通过, 在准备阶段的同时，该节点向所有副本节点发送准备消息,并且将预准备消息和准备消息写入本地log.用于viewChang恢复未完成的请求。 Commit阶段主节点和副本节点收到PREPARE消息，需要进行以下校验： a. 副本节点PARPARE消息签名是否正确。 b. 当前副本节点是否已经收到同一view下的n c. n是否在区间[h,H]里面 d.d是否和当前已收到PRE-PPREPARE中的d相同 非法请求丢弃,如果副本节点i收到了2f+1个验证通过的PREPARE消息，则向其他节点包括主节点发送一条消息，v, n, d, i与上述PREPARE消息内容相同。进行副本节点i的签名。记录COMMIT消息到日志中，用于View Change过程中恢复未完成的请求操作。记录其他副本节点发送的PREPARE消息到log中。 REPLY 阶段主节点和副本节点收到消息，需要进行以下校验： a. 副本节点COMMIT消息签名是否正确。 b. 当前副本节点是否已经收到了同一视图v下的n。 c. d与m的摘要是否一致。 d. n是否在区间[h, H]内。 非法请求丢弃。如果副本节点i收到了2f+1个验证通过的COMMIT消息，说明当前网络中的大部分节点已经达成共识，运行客户端的请求操作o，并返回给客户端，r：是请求操作结果，客户端如果收到f+1个相同的REPLY消息，说明客户端发起的请求已经达成全网共识，否则客户端需要判断是否重新发送请求给主节点。记录其他副本节点发送的COMMIT消息到log中。（补充：需要将针对某个请求的所有接受的消息写入日志，这个日志可以是在内存中的）。 上面介绍PBFT的一致性协议的各个过程，还有两个主要的过程接下来分别介绍 垃圾回收在上述算法流程中，为了确保在每次viewChange中能够恢复之前的请求，每个副本节点会记录一些log到本地，当执行请求后，副本节点需要将请求从本地删除。最简单的做法是当一个节点执行完某条请求并Reply后，，可以广播一条消息，当全网有2f+1个节点都执行完这条请求后就可以删除它的日志了，这样的做法成本比较高，所以可以在多条请求K后（例如100条）执行一次状态同步。这个状态同步消息就是checkPoint消息 副本节点i 发送&lt;给其他节点，n是当前节点保留的最后一个视图的请求编号。该checkPoint消息记录到log中。如果副本节点收到了2f+1个验证过的checkPoint消息，就可以证明该检查点是正确的。具有这个stable checkpoint的节点就可以将所有序号小于等于n的pre-prepare,prepare,commit消息，以及之前的检查点和检查点消息删除。 这是一个理想的情况，实际上当副本i向其他节点发出checkPoint消息后，其他节点还没完成K条请求，所以不会立即对i进行响应，他还是会按照自己的节奏，向前前进,但是此时的checkPoint还未形成stable,为了防止i的请求处理过快，设置一个上文提到的高低水位线[h,H]来解决这个问题。低水位h等于上一个stable checkPoint的值，高水位H = h + L, L为我们设定的值，等于checkPoint周期处理请求数的整数倍，可以设置为L = 2K。当副本节点i处理请求超过高水位线H的时候，此时就需要停一下脚本，等待stable checkPoint 发生变化，再继续前行。 viewChange如果主节点作恶，它可能会给不同的请求编上相同的序号，或者不去分配序号，或者让相邻的序号不连续。备份节点应当有职责来主动检查这些序号的合法性。如果主节点掉线或者作恶不广播客户端的请求，客户端设置超时机制，超时的话，向所有副本节点广播请求消息。副本节点检测出主节点作恶或者下线，发起View Change协议。 副本节点向其他节点广播消息。n是最新的stable checkpoint的编号，C是2f+1验证过的CheckPoint消息集合，P是当前副本节点未完成的请求的PRE-PREPARE和PREPARE消息集合。 当主节点p = v + 1 mod |R|收到2f个有效的VIEW-CHANGE消息后，向其他节点广播消息。V是有效的VIEW-CHANGE消息集合。O是主节点重新发起的未经完成的PRE-PREPARE消息集合。PRE-PREPARE消息集合的选取规则： 选取V中最小的stable checkpoint编号min-s，选取V中prepare消息的最大编号max-s。 在min-s和max-s之间，如果存在P消息集合，则创建&lt;, m&gt;消息。否则创建一个空的PRE-PREPARE消息，即：&lt;, m(null)&gt;, m(null)空消息，d(null)空消息摘要。 副本节点收到主节点的NEW-VIEW消息，验证有效性，有效的话，进入v+1状态，并且开始O中的PRE-PREPARE消息处理流程。如果一条请求在上一个view中到达了committed状态，主节点就选取这个请求开始在新的view中进行第三阶段。但是如果选取的请求在上一view中并没有被prepare，那它的编号n有可能是不被同意的，我们选择在新的view中作废这样的请求。 具体的viewChange过程如下 视图变更可以由超时触发，以防止备份节点无期限地等待请求的执行。备份节点在接收到一个有效请求，但是还没有执行它时，会查看计时器是否在运行，如果没有，那么它将启动计时器；当请求被执行时就把计时器停止。如果计时器超时，则view + 1,并将会把视图变更的消息向全网广播。 Q&amp;A pfbt共识为什么需要3f+ 1个节点？ pbft共识 parpare和commit 阶段为什么收到需要2f+ 1个节点回复（包括自己的），f + 1个不行吗？ pbft 共识 客户端为什么需要f + 1个节点的相同回复，f个不行吗？ pbft共识 为什么需要三阶段？去除掉commit阶段可以吗？ 在一个节点数为N的节点中，诚实节点的数量是多少个？ CAP定理在pbft中是如何取舍的？ 设置waterline的目的是什么？ PAREPARE 和commit阶段为什么需要保存消息在本地或者内存？PRE-PREPARE为什么不需要？ pbft通信时间复杂度是多少？如何计算的？ 如果在commit阶段view change，会导致达成不了共识吗？会导致之前的view下的请求编号丢失吗？ 下面篇文章我会给出这些问题的答案]]></content>
      <categories>
        <category>共识算法</category>
      </categories>
      <tags>
        <tag>pbft</tag>
      </tags>
  </entry>
</search>
