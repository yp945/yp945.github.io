<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Move IR 示例代码解读]]></title>
    <url>%2F2019%2F07%2F10%2Flibra-moveIR-exampleCode%2F</url>
    <content type="text"><![CDATA[Move IR 示例代码解读本节描述如何在Move中间表示(IR)中编写事务脚本和模块。IR是即将到来的Move源代码语言的早期(且不稳定)先驱。Move IR是一个覆盖于Move字节码之上的薄薄的语法层，用于测试字节码验证器和虚拟机，它对开发人员不是特别友好。它的级别足够高，可以编写人类可读的代码，但又足够低，可以直接编译以移动字节码。 接下来，我将展示一些Move IR片段。关于如何在本地编译、运行和修改这些示例来学习。libra/language/README.md and libra/language/compiler/README.md解释了如何做到这一点。 编写事务脚本正如我们在Move事务脚本中解释的那样，用户编写事务脚本来请求对Libra区块链的全局存储的更新。几乎在任何事务脚本中都会出现两个重要的构建块:LibraAccount.T和LibraCoin.T。LibraAccount是模块的名称，T是该模块声明的资源的名称。这是一个通用的命名约定;模块声明的“main”类型通常命名为T。 当我们说一个用户“在Libra区块链上的地址0xff处有一个帐户”时，我们的意思是地址0xff持有LibraAccount.T的资源。每个非空地址都有一个LibraAccount.T资源。此资源存储帐户数据，如序列号、身份验证密钥和余额。Libra系统的任何部分想要与一个帐户进行交互，都必须从LibraAccount.T资源中读取数据或者调用LibraAccount的模块的过程函数。 帐户余额是LibraCoin.T类型的资源，就像其他移动资源一样。LibraCoin类型的资源T可以存储在程序变量中，在过程之间传递，等等。 下面这些例子展示了如何与模块和资源交互。 1234567891011121314151617181920// 使用已经发布到链上的在一个地址上的Libra 模块// 0x0...0 (with 64 zeroes). 0x0其实是一个缩写，其中包含64个0import 0x0.LibraAccount;import 0x0.LibraCoin;main(payee: address, amount: u64) &#123; //IR代码的局部变量范围在整个函数过程，所有的局部变量声明都必须 //在程序的开始。声明和初始化变量是独立的操作，但是字节码验证器会阻止 //任何使用未初始化变量的尝试。 let coin: R#LibraCoin.T; //上面类型的R#部分是两个*类型注解* R#和V#之一(“Resource”和“unrestricted Value”的缩写)。这些注解 //必须匹配类型声明的类型(例如LibraCoin模块声明“resource T”或“struct T”) //获取sender的数量为amount的 LibraCoin.T资源，如果sender的余额不足balance，则会失败，这里amount // 是一个 unrestricted值，所以可以copy也可以move，但是因为后续不再使用， 所以最好还是move掉(move // 白皮书是里面写的是copy) coin = LibraAccount.withdraw_from_sender(move(amount)); // Move LibraCoin.T 资源进入payee账户，如果账户不存在，则步骤失败 LibraAccount.deposit(move(payee), move(coin)); //每一个函数过程必须要有个return, IR 编译器不会在没有写return的情况下，自己加上return，如果有返回 // 值，还要写上相应的返回值 return;&#125; 这个事务脚本有一个不幸的问题——如果收款人地址下没有帐户，它将失败。我们将通过修改脚本来解决这个问题，以便在收款人帐户不存在的情况下为其创建帐户。 123456789101112131415161718192021222324// 一个点对点支付的例子变体，即当账户不存在的时候，创建账户import 0x0.LibraAccount;import 0x0.LibraCoin;main(payee: address, amount: u64) &#123; let coin: R#LibraCoin.T; let account_exists: bool; // Acquire a LibraCoin.T resource with value `amount` from the sender&apos;s // account. This will fail if the sender&apos;s balance is less than `amount`. coin = LibraAccount.withdraw_from_sender(move(amount)); //这里调用LibraAccount的内置函数判断账户是否存在 account_exists = LibraAccount.exists(copy(payee)); if (!move(account_exists)) &#123; //通过发布一个LibraAccount.T 资源在接收方地址下的方式为接受者创建一个账户，如果 //账户资源已经存在，则失败 create_account(copy(payee)); &#125; LibraAccount.deposit(move(payee), move(coin)); return;&#125; 让我们看一个更复杂的例子。在本例中，我们将使用事务脚本向多个收件人付款，而不是只向一个收件人付款。 12345678910111213141516171819202122//多个收款人例子，这个例子将amount1+ amount2数量的资金转移到 收款1账户和收款2账户上import 0x0.LibraAccount;import 0x0.LibraCoin;main(payee1: address, amount1: u64, payee2: address, amount2: u64) &#123; let coin1: R#LibraCoin.T; let coin2: R#LibraCoin.T; let total: u64; total = move(amount1) + copy(amount2); coin1 = LibraAccount.withdraw_from_sender(move(total)); // This mutates `coin1`, which now has value `amount1`. // `coin2` has value `amount2`. //下面代码执行完后，coin1资源将拥有数量为amount1的Coin //coin2是一个有amount2数量coin的资源，withdraw是一个内置函数 coin2 = LibraCoin.withdraw(&amp;mut coin1, move(amount2)); // 执行支付 LibraAccount.deposit(move(payee1), move(coin1)); LibraAccount.deposit(move(payee2), move(coin2)); return;&#125; 编写模块现在，我们将把注意力转向编写自己的Move模块，而不是重用现有的LibraAccount和LibraCoin模块。考虑这种情况:Bob将在将来的某个时候在地址a创建一个帐户。Alice想为Bob“指定”一些资金，这样一旦Bob的账户创建好了，他就可以把这些资金转到他的账户中。但她也希望，如果鲍勃从未创建过账户，她也能收回自己的资金。 为了给Alice解决这个问题，我们将编写一个模块EarmarkedLibraCoin: 声明一个新的资源类型EarmarkedLibraCoin。这里面有Libra coin和接收方地址 允许Alice创建这样的类型并将其发布到她的帐户下(create过程)。 允许Bob claim资源(claim_for_receiver过程) 允许任何拥有EarmarkedLibraCoin.T资源的人销毁它，并获得底层的LibraCoin(unwarp的过程) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//一个用于收款地址指定coin的模块module EarmarkedLibraCoin &#123; import 0x0.LibraCoin; //T 定义了一个资源， 包含了Libra coin 和一个收款地址 resource T &#123; coin: R#LibraCoin.T, recipient: address &#125; // 为指定收款地址创建EarmarkedCoin 资源 // 在此交易发送方账户发布该资源 public create(coin: R#LibraCoin.T, recipient: address) &#123; let t: R#Self.T; //构造或者叫做打包一个类型为T的资源，只有EarmarkedCoin 模块的函数可以创建 EarmarkedCoin.T t = T &#123; coin: move(coin), recipient: move(recipient), &#125;; // 在此交易发送者账户下发布 earmarked coin //每个账户可以包含一个指定类型的资源，如果有相同类型的资源存在，此过程会失败 //move_to_sender是一个内置函数，作用是将资源发布到sender账户，支持泛型 move_to_sender&lt;T&gt;(move(t)); return; &#125; //允许交易发送者认领一枚指定给他的硬币。 public claim_for_recipient(earmarked_coin_address: address): R#Self.T &#123; let t: R#Self.T; //这里创建T资源的引用是为了防止资源只能被move一次，assert之后而不能进行return let t_ref: &amp;R#Self.T; let sender: address; //移除指定地址T类型的资源，如果指定地址没有类型T的资源，则失败 t = move_from&lt;T&gt;(move(earmarked_coin_address)); //拿到资源引用，方便后续assert t_ref = &amp;t; //获取此次交易发送者账户 sender = get_txn_sender(); //确保收款账户是交易发送者，如果断言失败，则此次交易不会造成任何影响， 原子操作。 //99是一个内部断言使用的error code,便于交易失败打印事件 assert(*(&amp;move(t_ref).recipient) == move(sender), 99); //返回获取到的资源，接下来应该使用unwarp获取资源里面的Libra coin了 return move(t); &#125; // 如果Bob的地址没有被创建，则Alice将会回收掉该资源 public claim_for_creator(): R#Self.T &#123; let t: R#Self.T; let coin: R#LibraCoin.T; let recipient: address; let sender: address; sender = get_txn_sender(); // This will fail if no resource of type T under the sender&apos;s address. t = move_from&lt;T&gt;(move(sender)); return move(t); &#125; // 从包装资源里面获取到Libra coin,并将它返回给调用者 public unwrap(t: R#Self.T): R#LibraCoin.T &#123; let coin: R#LibraCoin.T; let recipient: address; // 将t 资源进行解包，用T类型去接收，只有声明了T类型的模块才可以接收这个资源 T &#123; coin, recipient &#125; = move(t); //返回libra coin资源 return move(coin); &#125;&#125; 上述过程可以综述为：Alice可以创建一个事务脚本，调用create方法，参数为Bob的地址和libra coin资源，从而为Bob创建一个指定的coin在她的地址上。一旦创建了这个资源, Bob就可以通过从发送事务来声明coin。这将调用claim_for_receiver，然后将结果传递给unwrap，并将返回的LibraCoin存储在他希望的任何地方。如果Bob花了太长时间在创建一个帐户上，而Alice想要收回她的资金，她可以使用claim_for_creator和unwrap。将资金回收。 rust引用说明这里针对上述例子有个关于rust引用或者借用的说明，这也是针对白皮书里面的一些引用形式给一个解释 123456789let b = a; a绑定的资源A转移给b，b拥有这个资源Alet b = &amp;a; a绑定的资源A借给b使用，b只有资源A的读权限let b = &amp;mut a; a绑定的资源A借给b使用，b有资源A的读写权限let mut b = &amp;mut a; a绑定的资源A借给b使用，b有资源A的读写权限。同时，b可绑定到新的资源上面去(更新绑定的能力)let &amp;mut b = &amp;mut a; a 绑定的资源A借给b的引用使用，b的引用有资源A的读写权限。同时b的引用可以绑定到新的资源上面去(更新绑定能力)如果一个值有了可变引用，则不能再有不变引用，这部分内容可以仔细参考rust的引用与借用关系 例子讲解下面我会抽取libra github仓库里面的一些典型的例子来对move进行更加全面的解释。 下面这个示例是一个module 1234module Signature &#123; native public ed25519_verify(signature: bytearray, public_key: bytearray, message: bytearray): bool;&#125;这个模块是官方的算法验签名模块，正如白皮书里面说得到，move语言可以直接调用一些rust的函数实现，这个过程称之为navite,用navite标识。 下面这个示例是一个script，由一个main过程构成 123456import 0x0.LibraAccount;main (new_key: bytearray) &#123; LibraAccount.rotate_authentication_key(move(new_key)); return;&#125;它引入了0x0地址(缩写)上的LibraAccount模块，并调用rotate_authentication_key过程，替换账户身份验证密钥，这个与账户创建密钥不一样，这个密钥是用来创建交易签名的 下面这个示例是一个module + script，它以modules:开始，表明module的开始段落，以script开始事务脚本段落，事务脚本可以使用上面定义的module。 1234567891011121314151617181920212223242526272829303132modules:module B &#123; struct T &#123;g: u64&#125; public new(g: u64): V#Self.T &#123; return T&#123;g: move(g)&#125;; &#125; public t(this: &amp;V#Self.T) &#123; let g: &amp;u64; let y: u64; g = &amp;copy(this).g; y = *move(g); //这里因为this资源没有再次被使用，所以使用release减少一次引用计数 release(move(this)); return; &#125;&#125;script:import Transaction.B;main() &#123; let x: V#B.T; let y: &amp;V#B.T; x = B.new(5); y = &amp;x; B.t(move(y)); return;&#125; 接下来主要分析一下 LibraCoin 和LibraAccount这两个内置模块 LibraCoin 模块分析123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102module LibraCoin &#123; // A resource representing the Libra coin resource T &#123; // The value of the coin. May be zero value: u64, &#125; // A resource that grants access to `LibraCoin.mint`. Only the Association account has one. resource MintCapability &#123;&#125; // Return a reference to the MintCapability published under the sender&apos;s account. Fails if thesender does not have a MintCapability. // Since only the Association account has a mint capability, this will only succeed if it is invoked by a transaction sent by that account. public borrow_sender_mint_capability(): &amp;R#Self.MintCapability &#123; let sender: address; //可变引用 let capability_ref: &amp;mut R#Self.MintCapability; //不可变引用 let capability_immut_ref: &amp;R#Self.MintCapability; sender = get_txn_sender(); capability_ref = borrow_global&lt;MintCapability&gt;(move(sender)); //borrow_global默认返回可变引用，这里使用freeze需要去除可变性 capability_immut_ref = freeze(move(capability_ref)); return move(capability_immut_ref); &#125; // mint 一个新的LibraCoin.T资源价值 value, 调用者必须有一个MintCapability的引用 //只有联盟成员账户可以获取这样的引用，而且只能通过 borrow_sender_mint_capbaility方法获取 public mint(value: u64, capability: &amp;R#Self.MintCapability): R#Self.T &#123; release(move(capability)); return T&#123;value: move(value)&#125;; &#125; //这个过程是私有的，因为只能被虚拟机内部调用它只被使用 //在创世纪创建writeset时，为联盟帐户提供单个mintability grant_mint_capability() &#123; move_to_sender&lt;MintCapability&gt;(MintCapability&#123;&#125;); return; &#125; // Create a new LibraCoin.T with a value of 0 public zero(): R#Self.T &#123; return T&#123;value: 0&#125;; &#125; //公开coin数值的访问方法 public value(coin_ref: &amp;R#Self.T): u64 &#123; return *&amp;move(coin_ref).value; &#125; // 将 coin分为两半，一半是给定数值，一般是剩余数值 public split(coin: R#Self.T, amount: u64): R#Self.T * R#Self.T &#123; let other: R#Self.T; other = Self.withdraw(&amp;mut coin, move(amount)); return move(coin), move(other); &#125; //从给定coin资源中划分出amount数量的资源，并将新创建的资源返回 public withdraw(coin_ref: &amp;mut R#Self.T, amount: u64): R#Self.T &#123; let value: u64; // Check that `amount` is less than the coin&apos;s value value = *(&amp;mut copy(coin_ref).value); assert(copy(value) &gt;= copy(amount), 10); // 直接在原来的值上面分割 *(&amp;mut move(coin_ref).value) = move(value) - copy(amount); return T&#123;value: move(amount)&#125;; &#125; // 合并两个同样的coin资源，并将新的资源返回 public join(coin1: R#Self.T, coin2: R#Self.T): R#Self.T &#123; Self.deposit(&amp;mut coin1, move(coin2)); return move(coin1); &#125; // &quot;Merges&quot; the two coins check 是需要合并在coin_ref上的资源 public deposit(coin_ref: &amp;mut R#Self.T, check: R#Self.T) &#123; let value: u64; let check_value: u64; value = *(&amp;mut copy(coin_ref).value); T &#123; value: check_value &#125; = move(check); *(&amp;mut move(coin_ref).value)= move(value) + move(check_value); return; &#125; //销毁一个值为0的资源，不能销毁一个非0值的资源 public destroy_zero(coin: R#Self.T) &#123; let value: u64; T &#123; value &#125; = move(coin); assert(move(value) == 0, 11); return; &#125; //临时的程序，将来将会被取消，此程序主要是用来从账户消耗一定的手续费 public TODO_REMOVE_burn_gas_fee(coin: R#Self.T) &#123; let value: u64; T &#123; value &#125; = move(coin); return; &#125;&#125; LibraAccount模块分析123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302//这个模块主要是很对账户资源的，用于管理每个Libra账户//可以看到他引用了module LibraAccount &#123; import 0x0.LibraCoin; import 0x00.Hash; //每个Libra账户都有一个LibraAccount.T资源 // Every Libra account has a LibraLibraAccount.T resource resource T &#123; // The coins stored in this account balance: R#LibraCoin.T, //当前的身份认证key //这个key可以与创建账户的key不同 authentication_key: bytearray, //账户nonce sequence_number: u64, //临时的发送交易事件计数器，等到后面事件系统被完善后，这个值应该会被代替 sent_events_count: u64, //临时的交易接收事件计数器，等到后面事件系统被完善后，这个值应该会被代替 received_events_count: u64 &#125; // Message for sent events struct SentPaymentEvent &#123; // The address that was paid payee: address, // The amount of LibraCoin.T sent amount: u64, &#125; // Message for received events struct ReceivedPaymentEvent &#123; // The address that sent the coin payer: address, // The amount of LibraCoin.T received amount: u64, &#125; //创建一个新的LibraAccount.T类型的资源 //这个过程被内置模块create_account调用 make(auth_key: bytearray): R#Self.T &#123; let zero_balance: R#LibraCoin.T; zero_balance = LibraCoin.zero(); return T &#123; balance: move(zero_balance), authentication_key: move(auth_key), sequence_number: 0, sent_events_count: 0, received_events_count: 0, &#125;; &#125; // 向payee账户存入to_deposit资源 public deposit(payee: address, to_deposit: R#LibraCoin.T) &#123; let deposit_value: u64; let payee_account_ref: &amp;mut R#Self.T; let sender: address; let sender_account_ref: &amp;mut R#Self.T; let sent_event: V#Self.SentPaymentEvent; let received_event: V#Self.ReceivedPaymentEvent; // Check that the `to_deposit` coin is non-zero deposit_value = LibraCoin.value(&amp;to_deposit); assert(copy(deposit_value) &gt; 0, 7); // Load the sender&apos;s account sender = get_txn_sender(); sender_account_ref = borrow_global&lt;T&gt;(copy(sender)); // Log a send event sent_event = SentPaymentEvent &#123; payee: copy(payee), amount: copy(deposit_value) &#125;; // 目前的打印事件只是临时之举，未来应该会变得更加有条理 emit_event(&amp;mut move(sender_account_ref).sent_events_count, b&quot;73656E745F6576656E74735F636F756E74&quot;, move(sent_event)); // Load the payee&apos;s account payee_account_ref = borrow_global&lt;T&gt;(move(payee)); // Deposit the `to_deposit` coin LibraCoin.deposit(&amp;mut copy(payee_account_ref).balance, move(to_deposit)); // Log a received event received_event = ReceivedPaymentEvent &#123; payer: move(sender), amount: move(deposit_value) &#125;; // TEMPORARY The events system is being overhauled and this will be replaced by something // more principled in the future emit_event(&amp;mut move(payee_account_ref).received_events_count, b&quot;72656365697665645F6576656E74735F636F756E74&quot;, move(received_event)); return; &#125; //mint_to-address 只能被又有mint能力的的账户使用(参照LibraCoin模块) //这些帐户将被收取gas费用。如果这些帐户没有足够的gas支付,则mint失败 // 那些账户也可以mint给自己coin public mint_to_address(payee: address, amount: u64) &#123; let mint_capability_ref: &amp;R#LibraCoin.MintCapability; let coin: R#LibraCoin.T; let payee_account_ref: &amp;mut R#Self.T; let payee_exists: bool; let sender: address; // Mint the coin mint_capability_ref = LibraCoin.borrow_sender_mint_capability(); coin = LibraCoin.mint(copy(amount), move(mint_capability_ref)); // Create an account if it does not exist payee_exists = exists&lt;T&gt;(copy(payee)); if (!move(payee_exists)) &#123; //这一行感觉没必要 sender = get_txn_sender(); Self.create_new_account(copy(payee), 0); &#125; // Deposit the minted `coin` Self.deposit(move(payee), move(coin)); return; &#125; // Helper to withdraw `amount` from the given `account` and return the resulting LibraCoin.T withdraw_from_account(account: &amp;mut R#Self.T, amount: u64): R#LibraCoin.T &#123; let to_withdraw: R#LibraCoin.T; to_withdraw = LibraCoin.withdraw(&amp;mut move(account).balance, copy(amount)); return move(to_withdraw); &#125; // Withdraw `amount` LibraCoin.T from the transaction sender&apos;s account public withdraw_from_sender(amount: u64): R#LibraCoin.T &#123; let sender: address; let sender_account: &amp;mut R#Self.T; let to_withdraw: R#LibraCoin.T; // Load the sender sender = get_txn_sender(); sender_account = borrow_global&lt;T&gt;(move(sender)); // Withdraw the coin to_withdraw = Self.withdraw_from_account(move(sender_account), move(amount)); return move(to_withdraw); &#125; //从发送者账户转移资金到接受者，如果发送者账户不存在，先创建账户，然后再调用此过程 public pay_from_sender(payee: address, amount: u64) &#123; let to_pay: R#LibraCoin.T; let payee_exists: bool; payee_exists = exists&lt;T&gt;(copy(payee)); if (move(payee_exists)) &#123; to_pay = Self.withdraw_from_sender(move(amount)); Self.deposit(move(payee), move(to_pay)); &#125; else &#123; Self.create_new_account(move(payee), move(amount)); &#125; return; &#125; //更新交易发送者身份认证key //新的key将会被用于交易签名 public rotate_authentication_key(new_authentication_key: bytearray) &#123; let sender: address; let sender_account: &amp;mut R#Self.T; sender = get_txn_sender(); sender_account = borrow_global&lt;T&gt;(move(sender)); *(&amp;mut move(sender_account).authentication_key) = move(new_authentication_key); return; &#125; //创建一个新的账户，如果初始资金&gt;0，则从交易发送者账户转移资金到新账户 public create_new_account(fresh_address: address, initial_balance: u64) &#123; create_account(copy(fresh_address)); if (copy(initial_balance) &gt; 0) &#123; Self.pay_from_sender(move(fresh_address), move(initial_balance)); &#125; return; &#125; // Helper to return u64 value of the `balance` field for given `account` balance_for_account(account: &amp;R#Self.T): u64 &#123; let balance_value: u64; balance_value = LibraCoin.value(&amp;move(account).balance); return move(balance_value); &#125; // Return the current balance of the LibraCoin.T in LibraLibraAccount.T at `addr` public balance(addr: address): u64 &#123; let payee_account: &amp;mut R#Self.T; let imm_payee_account: &amp;R#Self.T; let balance_amount: u64; //从账户地址，拿到LibraAccount类型的资源，此时拿到的资源是可变的 payee_account = borrow_global&lt;T&gt;(move(addr)); //将资源转为不可变资源，防止误操作 imm_payee_account = freeze(move(payee_account)); balance_amount = Self.balance_for_account(move(imm_payee_account)); return move(balance_amount); &#125; // Helper to return the sequence number field for given `account` sequence_number_for_account(account: &amp;R#Self.T): u64 &#123; return *(&amp;move(account).sequence_number); &#125; // Return the current sequence number at `addr` public sequence_number(addr: address): u64 &#123; let account_ref: &amp;mut R#Self.T; let imm_ref: &amp;R#Self.T; let sequence_number_value: u64; account_ref = borrow_global&lt;T&gt;(move(addr)); imm_ref = freeze(move(account_ref)); sequence_number_value = Self.sequence_number_for_account(move(imm_ref)); return move(sequence_number_value); &#125; // Checks if an account exists at `check_addr` public exists(check_addr: address): bool &#123; let is_present: bool; is_present = exists&lt;T&gt;(move(check_addr)); return move(is_present); &#125; // 序言过程在每笔交易开始的时候被调用，它要做以下验证： //账户的身份key是否匹配交易的公钥 //账户是否有足够的金额支付所有的gas //sequence number是否匹配当前账户sequence key prologue() &#123; let transaction_sender: address; let transaction_sender_exists: bool; let sender_account: &amp;mut R#Self.T; let imm_sender_account: &amp;R#Self.T; let sender_public_key: bytearray; let public_key_hash: bytearray; let gas_price: u64; let gas_units: u64; let gas_fee: u64; let balance_amount: u64; let sequence_number_value: u64; let transaction_sequence_number_value: u64; transaction_sender = get_txn_sender(); // 现在这些error code还是很不友好的，后续应该会变得更好 transaction_sender_exists = exists&lt;T&gt;(copy(transaction_sender)); assert(move(transaction_sender_exists), 5); // Load the transaction sender&apos;s account sender_account = borrow_global&lt;T&gt;(copy(transaction_sender)); //检查交易的公钥是否与当前账户的身份key相匹配 sender_public_key = get_txn_public_key(); public_key_hash = Hash.sha3_256(move(sender_public_key)); assert(move(public_key_hash) == *(&amp;copy(sender_account).authentication_key), 2); // 检查是否有足够的余额支付交易手续费 gas_price = get_txn_gas_unit_price(); gas_units = get_txn_max_gas_units(); //先计算最大所需的手续费,在交易结束后进行扣除真实消耗的gas手续费 gas_fee = move(gas_price) * move(gas_units); imm_sender_account = freeze(copy(sender_account)); balance_amount = Self.balance_for_account(move(imm_sender_account)); assert(move(balance_amount) &gt;= move(gas_fee), 6); // 检查交易的sequence number是否与账户保存的sequence number匹配 sequence_number_value = *(&amp;mut move(sender_account).sequence_number); transaction_sequence_number_value = get_txn_sequence_number(); //这里多判断一次可能是未来防止并行交易的时候较大sequence number可以被接受 assert(copy(transaction_sequence_number_value) &gt;= copy(sequence_number_value), 3); assert(move(transaction_sequence_number_value) == move(sequence_number_value), 4); return; &#125; // 收尾主要是被用于在交易结束后进行一些处理 //主要是计算交易真实消耗gas的手续费和调整账户sequence number // The epilogue is invoked at the end of transactions. // It collects gas and bumps the sequence number epilogue() &#123; let transaction_sender: address; let sender_account: &amp;mut R#Self.T; let imm_sender_account: &amp;R#Self.T; let gas_price: u64; let gas_units_remaining: u64; let starting_gas_units: u64; let gas_fee_amount: u64; let balance_amount: u64; let gas_fee: R#LibraCoin.T; let transaction_sequence_number_value: u64; transaction_sender = get_txn_sender(); // Load the transaction sender&apos;s account sender_account = borrow_global&lt;T&gt;(copy(transaction_sender)); //收取真实消耗的gas的手续费 gas_price = get_txn_gas_unit_price(); starting_gas_units = get_txn_max_gas_units(); gas_units_remaining = get_gas_remaining(); gas_fee_amount = move(gas_price) * (move(starting_gas_units) - move(gas_units_remaining)); imm_sender_account = freeze(copy(sender_account)); balance_amount = Self.balance_for_account(move(imm_sender_account)); assert(move(balance_amount) &gt;= copy(gas_fee_amount), 6); gas_fee = Self.withdraw_from_account(copy(sender_account), move(gas_fee_amount)); //销毁掉相应的手续费资源 LibraCoin.TODO_REMOVE_burn_gas_fee(move(gas_fee)); // 账户sequence number + 1 transaction_sequence_number_value = get_txn_sequence_number(); *(&amp;mut move(sender_account).sequence_number) = move(transaction_sequence_number_value) + 1; return; &#125;&#125;]]></content>
      <categories>
        <category>libra</category>
        <category>move语言</category>
      </categories>
      <tags>
        <tag>libra</tag>
        <tag>move语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pbft共识算法问题答案]]></title>
    <url>%2F2019%2F07%2F10%2Fconsensus-pbft-QA%2F</url>
    <content type="text"><![CDATA[pbft共识算法问题答案 pfbt共识为什么至少需要3f+ 1个节点？ 最坏的情况，系统拜占庭节点为f个，由于消息到达顺序的问题，有可能f个有问题的节点先比f个正常的节点先返回消息，此时又要保证正确的消息比有问题的消息多，所以至少3f+ 1个节点 N - f- f > f => N > 3f pbft共识 parpare和commit 阶段为什么收到需要2f+ 1个相同的回复（包括自己的），f + 1个不行吗？ 某副本收到了f+ 1相同的消息反馈,如果这个f+ 1个反馈中包含faulty 节点，此时消息是不能作数的，因为faulty可能会发送错误消息给不同的节点，所以需要必须要2f+1个相同的反馈确认才能保证f+1个non-faulty节点正常，这时候即便f个faulty节点给不同人发不同消息也没关系，f+1个non-faulty节点已经形成了统一战线，他们在人数上已经多于那些墙头草了，可以达成一致了。 pbft 共识 客户端为什么需要f + 1个节点的相同回复，f个不行吗？ 假设只需要从f个不同的节点那里拿到相同的reply，但我们不得不考虑一种情况，即这f个相同的reply全是来自f个faulty节点【系统中至多有f个faulty节点】。如果真是这样的话，很有可能客户端就得到错误的结果。因此为了进一步增强reply的可信度，我们需要来自不同节点的总计(f+1)个相同reply。多出的那一个可以作为对比！ pbft共识 为什么需要三阶段？去除掉commit阶段可以吗？ 假设我们去掉commit，所有节点收到2f+1(包括自己)的prepare之后就执行操作，会发生什么？ 其实如果顺利的话，即使有f个作恶节点，依然有f+1个正常节点所有节点都会收到正确的结果，最后所有的节点都能顺利的达成一致的结论。这样看来似乎我们完全不需要commit吗？ 但是如果主节点崩溃发生换主，其中只有一个或几个（不是大多数）已经收到了足够的prepare，其他节点因为网络原因没有收到本应该收到的足够多的prepare（异步网络环境没有任何通信保证，只有最终一定会收到的保证），那么那个执行了操作的节点就悲剧了，这个时候新主发起新一轮共识，sequence跟已经执行的操作一致，那个节点到底执行好还是不执行同样sequence的操作？ 那么commit是怎么做到的呢？假设节点收到足够多的prepare进入commit阶段，这个时候发生了一样的换主情形，由于节点还没执行，继续按照新一轮的流程走即可，这个时候sequence不变，但是view改变。 如果已经收到了足够的commit，并且已经执行了操作呢？仿佛陷入了prepare一样的地步…但是实际上因为要产生commit消息，说明2f+1个节点已经prepare了，换主的时候主会去搜集要重放的pre-prepare（2f+1个节点的，必然存在一个诚实节点并且有对应的pre-prepare）,因此会把同样的digest对应的消息view改为自己重发一次，并且注意到commit只需要跟当前的view相同就可以接受，那么实际上commit是对view不敏感的。 简而言之，prepare锁定同一个view下的sequence，commit锁定sequence。 在一个节点数为N的节点中，诚实节点的数量是多少个？ (non-faulty)=(2/3)*N+1 CAP定理在pbft中是如何取舍的？ PBFT算法将一致性（C）摆在首位，对可用性（A）作了妥协。一旦faulty节点的数量超过f，该系统就不能继续执行客户端的请求【系统会卡住，不能做写操作】。此外，分区容忍是必须要保证的。 设置waterline的目的是什么？ 假设主节点是坏的，它在给请求编号时故意选择了一个很大的编号，以至于超出了序号的范围，所以我们需要设置一个低水位（low water mark）h和高水位（high water mark）H，让主节点分配的编号在h和H之间，不能肆意分配 PAREPARE 和commit阶段为什么需要保存消息在本地或者内存？PRE-PREPARE为什么不需要？ 保存消息的主要目的是为了方便viewChange的时候能够恢复消息，重新在新的view上达成共识。PRE-PREPARE阶段各节点还没有发送消息给对方，所以不需要保存。 pbft通信时间复杂度是多少？如何计算的？ 因为需要三阶段共识，每个阶段各个节点之间都需要通信，所以通信量还是很大的。 假设系统中存在2个拜占庭节点，此时应该最少需要7个节点，下图展示了7个节点通信的过程 请求消息总量为： 1 + 3f + 3f(3f-f) + (3f-f+1)(3f+1) + 3f-1 在上述例子中我们可以进行一个简单计算 12345request messages: 1pre-prepare messages: 3f = 6prepare messages: 3f(3f-f) = 24commit messages: (3f-f+1)(3f+1)= 35reply messages: 3f-1 = 5 可以看出当有7各节点时，pbft需要的消息通信总量竟然达到了71次，这还是只有一次请求的情况下，如果副本更多，消息将会变得更多。 如果在commit阶段view change，会导致达成不了共识吗？会导致之前的view下的请求编号丢失吗？ 如果commit阶段viewchange，会保留之前commit阶段的请求，不会达成不了共识，也不会丢失请求编号 prepare阶段和commit阶段用来确保那些已经达到commit状态的请求即使在发生viewchange后在新的view里依然保持原有的序列不变，比如一开始在view 0中，共有req 0， req 1， req2三个请求依次进入了commit阶段，假设没有坏节点，那么这四个replicas即将要依次执行者三条请求并返回给Client。但这时主节点问题导致view change的发生，view 0 变成 view 1，在新的view里，原本的req 0， req1， req2三条请求的序列被保留，作数。那些处于pre-prepare和prepare阶段的请求在view change发生后，在新的view里都将被遗弃，不作数。 简单来说就是 如果每个节点都进入了commit阶段（这里要强调的是每个节点都进入这个commit阶段才算是整体进入了commit阶段），这时即使view change，也会保留之前的view里进入commit阶段的请求信息，view change会继续之前的commit阶段请求，不会再重新进入pre-prepare和prepare阶段。]]></content>
      <categories>
        <category>共识算法</category>
      </categories>
      <tags>
        <tag>pbft</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pbft共识算法]]></title>
    <url>%2F2019%2F07%2F09%2Fconsensus-pbft%2F</url>
    <content type="text"><![CDATA[pbft共识算法PBFT 是 parctical Byzantine Fault Tolerance（实用拜占庭容错算法）的缩写，它是由BFT算法演化出来的， 所有的BFT算法都为了解决一个问题，那就是在一个不可信的网络里，各个节点如何达成共识。这类问题被称为拜占庭将军问题。什么是拜占庭将军问题呢？拜占庭位于如今的土耳其的伊斯坦布尔，是古代东罗马帝国的首都。拜占庭罗马帝国国土辽阔，为了达到防御目的，每块封地都驻扎一支由将军统领的军队，每个军队都分隔很远，将军与将军之间只能靠信差传递消息。 在战争的时候，拜占庭军队内所有将军必需达成一致的共识，决定是否有赢的机会才去攻打敌人的阵营。但是，在军队内有可能存有叛徒和敌军的间谍，左右将军们的决定影响将军们达成一致共识。在已知有将军是叛徒的情况下，其余忠诚的将军如何达成一致协议的问题，这就是拜占庭将军问题。 比特币和以太坊代表的POS，EOS代表的DPOS，这些都是公链的算法，适用于众多节点的情况，通过牺牲CAP理论里面的 一致性来达到可用性。PBFT 本身算法的复杂度为O（n^2）他牺牲了可用性来达到一致性，适用于联盟链节点少的情况。 下面图片展示了主流的共识算法 实用拜占庭容错系统（PBFT）降低了拜占庭协议的运行复杂度，从指数级别降低到多项式级别（Polynomial），使拜占庭协议在分布式系统中应用成为可能。 ​ PBFT是一种状态机副本复制算法，即服务作为状态机进行建模，状态机在分布式系统的不同节点进行副本复制。每个状态机的副本都保存了服务的状态，同时也实现了服务的操作。将所有的副本组成的集合使用大写字母R表示，使用0到|R|-1的整数表示每一个副本。为了描述方便，通常假设故障节点数为f个，整个服务节点数为|R|=3f+1个，这里m是有可能失效的副本的最大个数。尽管可以存在多于3f+1个副本，但是额外的副本除了降低性能之外不能提高可靠性。 PBFT要求共同维护一个状态，所有节点采取的行动一致。为此，需要运行三类基本协议，包括一致性协议、检查点（checkPoint）协议和视图更换(viewChange)协议。我们主要关注支持系统日常运行的一致性协议。一致性协议至少包含若干个阶段：请求（request）、序号分配（pre-prepare）和响应（reply）。根据协议设计的不同，可能包含相互交互（prepare），序号确认（commit）等阶段。 上图显示了一个简化的PBFT的协议通信模式，其中C 为客户端， N0 ~N3 为共识节点。 其中N0 为主节点，N3 为故障节点。整个协议基本过程如下 (一)、客户端发出请求，激活主节点的服务操作。 (二)、主节点接收到请求，采用三阶段协议以向从节点广播请求。 序号分配阶段，主节点给每个请求分配一个序号N，广播序号分配消息和客户端的请求消息m,并将构造PRE-PREPARE 消息给各个从节点。 交互阶段 从节点收到PRE-PREPARE消息，向其他节点广播PARPARE消息。 序号确认阶段，各节点对当前视图（view）的请求和次序验证后，广播Commit消息，执行收到的客户端的请求，然后将结果响应给客户端。 (三) 、客户端等到f+1的相同的响应结果，则认为此次请求成功完成。 在这个机制下有一个视图（view）的概念，类似raft的term的概念。在当期view里面，有一个主节点，其他都是备份节点。主节点将客户端的请求编号并排序，然后发送给副本节点。但是此时主节点有可能是拜占庭的，它有可能给消息编上相同的序号，或者不去给消息分配序号，或者让分配的序号不连续。备份节点有职责去检查这次序号，并根据timeout机制判断主节点是否存活。当出现这些异常情况的时候，副本节点会触发viewChange协议来更换主节点，关于viewChange协议我们后面会讲到，接下来我们详细的分析各个阶段。 视图是连续的整数编号。主节点由公式得出 \mathrm{p}=\mathrm{v} \bmod |\mathrm{N}|这里v 是视图编号，p是副本编号， |N| 是副本集合的个数，当主节点失效就会触发viewChange过程。 请求阶段（REQUEST）客户端向主节点发送 请求, o为请求的具体的操作，t 为请求时客户端追加的时间戳，c为客户端标识。 预准备阶段（PRE-PREPARE）主节点接收到客户端的请求后需要进行以下校验 客户端请求消息签名是否合法，如果合法，则分配一个序号n给该请求，然后向所有的副本节点发送预准备消息，预准备消息的格式为&lt;, m&gt;，这里v是当前视图编号，n为消息序号，这个消息序号必须在[h, H] 之间，具体原因后面分析， d为请求消息的摘要。m是具体的消息。 请求本身是不包含在预准备消息体里面的，这样就可以使预准备消息足够小，因为预准备消息就是为了作为一个证明，证明在这个view里面 请求的的序号被赋值为n，从而可以在viewChange过程中可以进行追索另外一个层面，将“请求排序协议”和“请求传输协议”进行解耦，有利于对消息传输的效率进行深度优化。 准备阶段（PREPARE）副本节点i收到主节点的&lt;，m&gt;消息，需要进行以下校验： a. 主节点PRE-PREPARE消息签名是否正确。 b. 当前副本节点是否已经收到了一条在同一v下并且编号也是n，但是签名不同的PRE-PREPARE信息。 c. d与m的摘要是否一致。 d. n是否在区间[h, H]内。 如果检验通过, 在准备阶段的同时，该节点向所有副本节点发送准备消息,并且将预准备消息和准备消息写入本地log.用于viewChang恢复未完成的请求。 Commit阶段主节点和副本节点收到PREPARE消息，需要进行以下校验： a. 副本节点PARPARE消息签名是否正确。 b. 当前副本节点是否已经收到同一view下的n c. n是否在区间[h,H]里面 d.d是否和当前已收到PRE-PPREPARE中的d相同 非法请求丢弃,如果副本节点i收到了2f+1个验证通过的PREPARE消息，则向其他节点包括主节点发送一条消息，v, n, d, i与上述PREPARE消息内容相同。进行副本节点i的签名。记录COMMIT消息到日志中，用于View Change过程中恢复未完成的请求操作。记录其他副本节点发送的PREPARE消息到log中。 REPLY 阶段主节点和副本节点收到消息，需要进行以下校验： a. 副本节点COMMIT消息签名是否正确。 b. 当前副本节点是否已经收到了同一视图v下的n。 c. d与m的摘要是否一致。 d. n是否在区间[h, H]内。 非法请求丢弃。如果副本节点i收到了2f+1个验证通过的COMMIT消息，说明当前网络中的大部分节点已经达成共识，运行客户端的请求操作o，并返回给客户端，r：是请求操作结果，客户端如果收到f+1个相同的REPLY消息，说明客户端发起的请求已经达成全网共识，否则客户端需要判断是否重新发送请求给主节点。记录其他副本节点发送的COMMIT消息到log中。（补充：需要将针对某个请求的所有接受的消息写入日志，这个日志可以是在内存中的）。 上面介绍PBFT的一致性协议的各个过程，还有两个主要的过程接下来分别介绍 垃圾回收在上述算法流程中，为了确保在每次viewChange中能够恢复之前的请求，每个副本节点会记录一些log到本地，当执行请求后，副本节点需要将请求从本地删除。最简单的做法是当一个节点执行完某条请求并Reply后，，可以广播一条消息，当全网有2f+1个节点都执行完这条请求后就可以删除它的日志了，这样的做法成本比较高，所以可以在多条请求K后（例如100条）执行一次状态同步。这个状态同步消息就是checkPoint消息 副本节点i 发送&lt;给其他节点，n是当前节点保留的最后一个视图的请求编号。该checkPoint消息记录到log中。如果副本节点收到了2f+1个验证过的checkPoint消息，就可以证明该检查点是正确的。具有这个stable checkpoint的节点就可以将所有序号小于等于n的pre-prepare,prepare,commit消息，以及之前的检查点和检查点消息删除。 这是一个理想的情况，实际上当副本i向其他节点发出checkPoint消息后，其他节点还没完成K条请求，所以不会立即对i进行响应，他还是会按照自己的节奏，向前前进,但是此时的checkPoint还未形成stable,为了防止i的请求处理过快，设置一个上文提到的高低水位线[h,H]来解决这个问题。低水位h等于上一个stable checkPoint的值，高水位H = h + L, L为我们设定的值，等于checkPoint周期处理请求数的整数倍，可以设置为L = 2K。当副本节点i处理请求超过高水位线H的时候，此时就需要停一下脚本，等待stable checkPoint 发生变化，再继续前行。 viewChange如果主节点作恶，它可能会给不同的请求编上相同的序号，或者不去分配序号，或者让相邻的序号不连续。备份节点应当有职责来主动检查这些序号的合法性。如果主节点掉线或者作恶不广播客户端的请求，客户端设置超时机制，超时的话，向所有副本节点广播请求消息。副本节点检测出主节点作恶或者下线，发起View Change协议。 副本节点向其他节点广播消息。n是最新的stable checkpoint的编号，C是2f+1验证过的CheckPoint消息集合，P是当前副本节点未完成的请求的PRE-PREPARE和PREPARE消息集合。 当主节点p = v + 1 mod |R|收到2f个有效的VIEW-CHANGE消息后，向其他节点广播消息。V是有效的VIEW-CHANGE消息集合。O是主节点重新发起的未经完成的PRE-PREPARE消息集合。PRE-PREPARE消息集合的选取规则： 选取V中最小的stable checkpoint编号min-s，选取V中prepare消息的最大编号max-s。 在min-s和max-s之间，如果存在P消息集合，则创建&lt;, m&gt;消息。否则创建一个空的PRE-PREPARE消息，即：&lt;, m(null)&gt;, m(null)空消息，d(null)空消息摘要。 副本节点收到主节点的NEW-VIEW消息，验证有效性，有效的话，进入v+1状态，并且开始O中的PRE-PREPARE消息处理流程。如果一条请求在上一个view中到达了committed状态，主节点就选取这个请求开始在新的view中进行第三阶段。但是如果选取的请求在上一view中并没有被prepare，那它的编号n有可能是不被同意的，我们选择在新的view中作废这样的请求。 具体的viewChange过程如下 视图变更可以由超时触发，以防止备份节点无期限地等待请求的执行。备份节点在接收到一个有效请求，但是还没有执行它时，会查看计时器是否在运行，如果没有，那么它将启动计时器；当请求被执行时就把计时器停止。如果计时器超时，则view + 1,并将会把视图变更的消息向全网广播。 Q&amp;A pfbt共识为什么需要3f+ 1个节点？ pbft共识 parpare和commit 阶段为什么收到需要2f+ 1个节点回复（包括自己的），f + 1个不行吗？ pbft 共识 客户端为什么需要f + 1个节点的相同回复，f个不行吗？ pbft共识 为什么需要三阶段？去除掉commit阶段可以吗？ 在一个节点数为N的节点中，诚实节点的数量是多少个？ CAP定理在pbft中是如何取舍的？ 设置waterline的目的是什么？ PAREPARE 和commit阶段为什么需要保存消息在本地或者内存？PRE-PREPARE为什么不需要？ pbft通信时间复杂度是多少？如何计算的？ 如果在commit阶段view change，会导致达成不了共识吗？会导致之前的view下的请求编号丢失吗？ 下面篇文章我会给出这些问题的答案]]></content>
      <categories>
        <category>共识算法</category>
      </categories>
      <tags>
        <tag>pbft</tag>
      </tags>
  </entry>
</search>
